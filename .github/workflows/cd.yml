name: "CD Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        type: boolean
        default: false
      dry_run:
        description: "Dry run (build only, no release)"
        required: false
        type: boolean
        default: false

jobs:
  # Verify version matches Cargo.toml
  validate-version:
    name: Validate Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Check version matches Cargo.toml
        run: |
          echo "üîç Validating version input..."

          # Remove 'v' prefix from input version if present
          INPUT_VERSION="${{ inputs.version }}"
          INPUT_VERSION="${INPUT_VERSION#v}"

          # Extract version from Cargo.toml
          CARGO_VERSION=$(grep -m1 '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')

          echo "üìã Input version: $INPUT_VERSION"
          echo "üì¶ Cargo.toml version: $CARGO_VERSION"

          if [ "$INPUT_VERSION" != "$CARGO_VERSION" ]; then
            echo "‚ùå Version mismatch!"
            echo "   Input version: $INPUT_VERSION"
            echo "   Cargo.toml version: $CARGO_VERSION"
            echo ""
            echo "Please ensure the version you entered matches the version in Cargo.toml"
            echo "Either update Cargo.toml to version $INPUT_VERSION and commit, or use version $CARGO_VERSION"
            exit 1
          fi

          echo "‚úÖ Version matches Cargo.toml!"

  # Verify CI has passed before proceeding (lightweight check, no polling)
  check-ci:
    name: Verify CI Passed
    needs: validate-version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Check CI Status via GitHub API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Checking CI status for commit: ${{ github.sha }}"

          # Get all check runs for this commit
          gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs \
            --jq '.check_runs[] | select(.name | test("Build Project|Run Tests|Check Formatting|Run Clippy Lints|Build Documentation")) | "\(.name): \(.conclusion)"'

          # Check if all required checks passed
          FAILED_CHECKS=$(gh api repos/${{ github.repository }}/commits/${{ github.sha }}/check-runs \
            --jq '[.check_runs[] | select(.name | test("Build Project|Run Tests|Check Formatting|Run Clippy Lints|Build Documentation")) | select(.conclusion != "success")] | length')

          if [ "$FAILED_CHECKS" -gt 0 ]; then
            echo "‚ùå CI checks have not all passed. Please ensure all CI checks are green before releasing."
            exit 1
          fi

          echo "‚úÖ All CI checks passed!"

  # Build release binaries for all platforms
  build-release:
    name: Build ${{ matrix.platform.name }}
    needs: check-ci
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
          - name: Linux x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: enforce-script-lsp-linux-x64
          - name: Linux ARM64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact: enforce-script-lsp-linux-arm64
          - name: macOS x64
            os: macos-latest
            target: x86_64-apple-darwin
            artifact: enforce-script-lsp-macos-x64
          - name: macOS ARM64
            os: macos-latest
            target: aarch64-apple-darwin
            artifact: enforce-script-lsp-macos-arm64
          - name: Windows x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact: enforce-script-lsp-windows-x64.exe
          - name: Windows ARM64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            artifact: enforce-script-lsp-windows-arm64.exe
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install cross-compilation tools (Linux ARM64)
        if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build Release Binary
        run: cargo build --release --target ${{ matrix.platform.target }} --verbose
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Prepare Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.platform.target }}/release/enforce-script-lsp ${{ matrix.platform.artifact }}
          chmod +x ${{ matrix.platform.artifact }}

      - name: Prepare Binary (Windows)
        if: runner.os == 'Windows'
        run: |
          Copy-Item target/${{ matrix.platform.target }}/release/enforce-script-lsp.exe ${{ matrix.platform.artifact }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: ${{ matrix.platform.artifact }}
          retention-days: 1

  # Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    needs: check-ci
    if: ${{ !inputs.dry_run && !inputs.prerelease }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          echo "üì¶ Publishing to crates.io..."
          cargo publish --verbose

  # Create GitHub Release with all binaries
  create-release:
    name: Create GitHub Release
    needs: build-release
    if: ${{ !inputs.dry_run && always() && needs.build-release.result == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.version }}
          name: Release ${{ inputs.version }}
          prerelease: ${{ inputs.prerelease }}
          draft: false
          generate_release_notes: true
          files: |
            artifacts/enforce-script-lsp-linux-x64/enforce-script-lsp-linux-x64
            artifacts/enforce-script-lsp-linux-arm64/enforce-script-lsp-linux-arm64
            artifacts/enforce-script-lsp-macos-x64/enforce-script-lsp-macos-x64
            artifacts/enforce-script-lsp-macos-arm64/enforce-script-lsp-macos-arm64
            artifacts/enforce-script-lsp-windows-x64.exe/enforce-script-lsp-windows-x64.exe
            artifacts/enforce-script-lsp-windows-arm64.exe/enforce-script-lsp-windows-arm64.exe
