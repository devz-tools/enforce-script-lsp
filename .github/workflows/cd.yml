name: "CD Release"

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Release version (e.g., v1.0.0)"
                required: true
                type: string
            prerelease:
                description: "Mark as pre-release"
                required: false
                type: boolean
                default: false
            dry_run:
                description: "Dry run (build only, no release)"
                required: false
                type: boolean
                default: false

jobs:
    # Verify CI has passed before proceeding
    check-ci:
        name: Verify CI Passed
        runs-on: ubuntu-latest
        steps:
            - name: Wait for Build to succeed
              uses: lewagon/wait-on-check-action@v1.3.4
              with:
                  ref: ${{ github.ref }}
                  check-name: "Build Project and Tests"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  wait-interval: 10

            - name: Wait for Tests to succeed
              uses: lewagon/wait-on-check-action@v1.3.4
              with:
                  ref: ${{ github.ref }}
                  check-name: "Run Tests"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  wait-interval: 10

            - name: Wait for Format check to succeed
              uses: lewagon/wait-on-check-action@v1.3.4
              with:
                  ref: ${{ github.ref }}
                  check-name: "Check Formatting"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  wait-interval: 10

            - name: Wait for Clippy to succeed
              uses: lewagon/wait-on-check-action@v1.3.4
              with:
                  ref: ${{ github.ref }}
                  check-name: "Run Clippy Lints"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  wait-interval: 10

            - name: Wait for Docs to succeed
              uses: lewagon/wait-on-check-action@v1.3.4
              with:
                  ref: ${{ github.ref }}
                  check-name: "Build Documentation"
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
                  wait-interval: 10

    # Build release binaries for all platforms
    build-release:
        name: Build ${{ matrix.platform.name }}
        needs: check-ci
        runs-on: ${{ matrix.platform.os }}
        strategy:
            matrix:
                platform:
                    - name: Linux x64
                      os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact: enforce-script-lsp-linux-x64
                    - name: Linux ARM64
                      os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      artifact: enforce-script-lsp-linux-arm64
                    - name: macOS x64
                      os: macos-latest
                      target: x86_64-apple-darwin
                      artifact: enforce-script-lsp-macos-x64
                    - name: macOS ARM64
                      os: macos-latest
                      target: aarch64-apple-darwin
                      artifact: enforce-script-lsp-macos-arm64
                    - name: Windows x64
                      os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact: enforce-script-lsp-windows-x64.exe
                    - name: Windows ARM64
                      os: windows-latest
                      target: aarch64-pc-windows-msvc
                      artifact: enforce-script-lsp-windows-arm64.exe
        steps:
            - uses: actions/checkout@v5

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.platform.target }}

            - name: Cache Dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.cargo/registry/index/
                      ~/.cargo/registry/cache/
                      ~/.cargo/git/db/
                  key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-cargo-

            - name: Install cross-compilation tools (Linux ARM64)
              if: matrix.platform.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: Build Release Binary
              run: cargo build --release --target ${{ matrix.platform.target }} --verbose
              env:
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

            - name: Prepare Binary (Unix)
              if: runner.os != 'Windows'
              run: |
                  cp target/${{ matrix.platform.target }}/release/enforce-script-lsp ${{ matrix.platform.artifact }}
                  chmod +x ${{ matrix.platform.artifact }}

            - name: Prepare Binary (Windows)
              if: runner.os == 'Windows'
              run: |
                  Copy-Item target/${{ matrix.platform.target }}/release/enforce-script-lsp.exe ${{ matrix.platform.artifact }}

            - name: Upload Artifact
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.platform.artifact }}
                  path: ${{ matrix.platform.artifact }}
                  retention-days: 1

    # Create GitHub Release with all binaries
    create-release:
        name: Create GitHub Release
        needs: build-release
        if: ${{ !inputs.dry_run }}
        runs-on: ubuntu-latest
        permissions:
            contents: write
        steps:
            - uses: actions/checkout@v5

            - name: Download all artifacts
              uses: actions/download-artifact@v5
              with:
                  path: artifacts/

            - name: Create Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: ${{ inputs.version }}
                  name: Release ${{ inputs.version }}
                  prerelease: ${{ inputs.prerelease }}
                  draft: false
                  generate_release_notes: true
                  files: |
                      artifacts/enforce-script-lsp-linux-x64/enforce-script-lsp-linux-x64
                      artifacts/enforce-script-lsp-linux-arm64/enforce-script-lsp-linux-arm64
                      artifacts/enforce-script-lsp-macos-x64/enforce-script-lsp-macos-x64
                      artifacts/enforce-script-lsp-macos-arm64/enforce-script-lsp-macos-arm64
                      artifacts/enforce-script-lsp-windows-x64.exe/enforce-script-lsp-windows-x64.exe
                      artifacts/enforce-script-lsp-windows-arm64.exe/enforce-script-lsp-windows-arm64.exe
